function [map,map_mu,register,ms_map,ms_mu,ms_register] = my_QCIR(moving,static,varargin)
% QCIR Algorithm
%
% Inputs 
% moving : the moving image
% statuc : the static image
% varargin
% Level : multiscale level (Default : 3)
% Plot : enabling to plot the result
%
% Output
% map : registration result
% map_mu : corresponding Beltrami coefficients
% register : registered image
%
% Function is written by Jeffery Ka Chun Lam (2013)
% www.jefferykclam.com
% Reference : 
% L. M. Lui, K. C. Lam, T. W. Wong and X. Gu, 
% Texture map and video compression using Beltrami representation.
% SIAM Journal on Imaging Sciences, 6(4):1880-1902, 2013.

level = 3;
plotflag = 1;

for i = 1:length(varargin)
    if isa(varargin{i},'double') 
        continue;
    end
    if ~isempty(regexp(varargin{i},'^[Ll]evel','match'))
        level = varargin{i+1};
    end
    if ~isempty(regexp(varargin{i},'^[Pp]lot','match'))
        plotflag = 1;
    end
end

[face,vertex] = image_meshgen(size(static,1),size(static,2));  %生成三角格网 和顶点

if (sum(size(moving)-size(static))~=0)
    moving = imresize(moving,size(static),'bicubic');
end

ms_moving = cell(level,1);
ms_static = cell(level,1);
ms_face = cell(level,1);
ms_vertex = cell(level,1);
ms_mu = cell(level,1);
ms_map = cell(level,1);
ms_register = cell(level,1);

for k = level:-1:1
    
    display(['Registering in Level ', int2str(k),'...']);
    
    ms_moving{k} = imresize(moving,...
        [round(size(static,1)/(2^(k-1))),round(size(static,2)/(2^(k-1)))],...
        'bicubic');
    ms_static{k} = imresize(static,...
        [round(size(static,1)/(2^(k-1))),round(size(static,2)/(2^(k-1)))],...
        'bicubic');
    [tempface, tempvertex] = image_meshgen(size(ms_static{k},1),size(ms_static{k},2));
    ms_face{k} = tempface;
    ms_vertex{k} = tempvertex;
    % [temp_landmark,temp_index] = unique(vertex_search(vertex(landmark,:)/(2^(k-1)),tempvertex));
    % ms_landmark{k} = temp_landmark;
    % temp_target = target/(2^(k-1));
    % ms_target{k} = temp_target(temp_index,:);
end

[initial_map,initial_mu] = my_QCLR(ms_face{level},ms_vertex{level},size(ms_static{level}));

targetsize = size(ms_static{level});    
initial_register = warpimage(ms_moving{level},targetsize,ms_vertex{level},initial_map);